Kubectl commands

Obtener los pods de un name-space
    Kubectl get pods

Crear un pod en un name-space
    Kubectl run <pod-name> --image=<image_name>

Describir un pod
    Kubectl describe pod <pod-name>

Describir un nodo
    Kubectl describe node <node-name>

Crear un recurso a partir de un fichero
    kubectl create -f <FILENAME>

Para ver la lista de replic-controllers
    kubectl get replicationcontroller
    Si lanzamos un get pods les veremos

Para ver un replicaSet
    kubectl get replicaset

Para obtener información de un replicaSet
    kubectl describe rs/<rs-name>

    Si queremos modificar un replicaSet, podemos:

        1) usar kubectl replace -f <replica-set-definition>.yaml para modificar el contenido del fichero

        2) usar kubectl scale --replicas=<new number of replicas> -f <replica-set-definition>.yaml

        3) usar kubectl scale --replicas=<new number of replicas> <type = replicaset> <name from top metadata>

        4) usar kubectl scale --replicas=<number-of-replics> rs/<replicaset-name>

    Si queremos borrar un replicaSet

        kubectl delete replicaset <name from top metadata>

Editar un manifiesto de un recurso desplegado
    kubectl edit <resource-type>/<resource-name> -o yaml 
    
    Nos entrará en un editor (VIM por ejemplo) donde tendremos que editar el YAML.
    Cuando lo hayamos modificado, podemos usar el comando ':wq' para escribir+salir

    El fichero que vemos NO es el original, sino una copia que Kubernetes
    crea en memoria para permitirnos modificar la configuración de un objeto


    Otra forma puede ser:
        cat <pod-name>.yaml para ver en la terminal el fichero
        vim <pod-name>.yaml para editar el fichero en VIM
        Tras esto, para aplicar los cambios debemos lanzar:
          -f <pod-name>.yaml

Crear pod con comandos

    kubectl run <pod-name> --image=<image-name> --namespace=<namespace>(optional)

    La opción más recomendada es la siguiente:

    kubectl run <pod-name> --image=<image-name> --namespace=<namespace>(optional) --dry-run=client -o yaml > <file-name>.yaml
    
    Donde:
        --dry-run=client nos permite 'simular' si ese manififesto es correcto o no. Si no agregamos 'client' lo creará al lanzar el comando
        -o yaml > <file-name>.yaml nos permite guardar el manifiesto en un fichero yaml
Crear recursos con Kubectl

    Podemos generar plantillas para nuestros recursos si usamos

        kubectl create deploy <my-resource-name> --image=<image-name> --dry-run=client -o yaml
    
    Esto nos lanza por consola un manifiesto el cual podemos guardar en un fichero si hacemos:

        kubectl create deploy <my-resource-name> --image=<image-name> --dry-run=client -o yaml > <file-name>.yaml

    Podemos agregar más parámetros a parte de la imagen.

Extraer la info de un pod en un YAML

    kubectl get pod <pod-name> -o yaml > <file-name>.yaml

Upgrade

    Es una forma de actualizar los pods en la cual se van muriendo y creando de nuevo poco a poco para no
    tener una caida del servicio.

    RollBack
    Si la actualización tiene un fallo o queremos volver a lo anterior por cualquier motivo, entonces
    debemos lanzar el siguiente comando
        
        kubectl rollout undo deployment/<deployment-name>

Crear un namespace

    kubectl create namespace <namespace-name>

    kubectl create -f <file-name>.yaml

Crear recursos en un namespace concreto

    kubectl create -f <resource-file>.yaml --namespace=<namespace>
    
    Tambien podemos agregar el campo 'namespace' dentro de los metadatos
    del manifiesto para asegurarnos que el recurso SIEMPRE se crea en dicho namespace

Para listar recursos dentro de un namespace concreto podemos:

    kubectl get <resource> --namespace=<namespace>

    Si no especificamos el campo 'namespace' se busca en el default

    Podemos emplear otro namespace por defecto si ejecutamos lo siguiente:

    kubectl confing set-context $(kubectl confing current-context) --namespace=<namespace>
    De esta forma, si no especificamos el campo 'namespace' se mirara el namespace configurado
    como por defecto

    Siempre podemos ver todos los recursos entre todos los namespace si lanzamos

    kubectl get <resource> --all-namespace

Para obtener información de la conectividad de un servicio (svc) podemos:

    kubectl get svc <resource> --namespace=<namespace>

Crear un service

    kubectl create service <service-type> <service-name> --tcp=<port> --dry-run=client -o yaml > redis-service.yaml

Crear un pod con un puerto expuesto


    kubectl run <pod-name> --image=<image-name> --port=<port-to-expose> expose

Crear un pod con un ClusterIP expuesto


    kubectl run <pod-name> --image=<image-name> --port=<port-to-expose> --expose

    En este caso, el service de tipo ClusterIP llevará el mísmo nombre que el del pod

Editar pods en caliente

    Si el POD pertenece a un Deployments, podemos editar el pod en caliente con:

    kubectl edit deployment my-deployment

    En caso contrario, podemos extraer la configuración del pod que queremos modificar a un YAML, modificarlo y volverlo
    a crear con el nuevo manifiesto:

    kubectl get pod <my-pod-to-change> -o yaml > <file-name>.yaml
    kubectl create -f <file-name>.yaml

Modificar replicas de Deployments o replicaSets

    replicaSets

    kubectl scale --replicas=3 rs/<replica-set-name>

    Deployments

    kubectl scale deployment/<deployment-name> --replicas=3

Podemos agregar labels a nodos si lanzamos:

    kubectl label node <node-name> <label-key>=<label-value>