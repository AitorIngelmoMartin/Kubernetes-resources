# 1) Create a redis deployment using the image redis:alpine with 1 replica and label app=redis. 

# 2) Expose it via a ClusterIP service called redis on port 6379. 

# 3) Create a new Ingress Type NetworkPolicy called redis-access which allows only the pods with label access=redis to access the deployment.

#   Image: redis:alpine
#   Deployment created correctly?
#   Service created correctly?
#   Network Policy allows the correct pods?
#   Network Policy applied on the correct pods?

# 1-DEPLOYMENT
# k create deployment redis --image=redis:alpine --replicas=1 --dry-run=client --port=6379
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: redis:alpine
        name: redis
        ports:
        - containerPort: 6379
---
# 2) ClusterIP
# k create service clusterip redis --tcp=6379
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  clusterIP: 172.20.235.147
  clusterIPs:
  - 172.20.235.147
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: "6379"
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
  type: ClusterIP
---
# NOTA: Podr√≠amos haber creado el deployment y el ClusterIp con: 
# k expose deployment redis --name=redis --port=6379 --target-port=6379

# 3) NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-access
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: redis #Labels del deployment
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: redis #Labels de los pods sobre los que aplica la regla
    ports:
    - port: 6379
      protocol: TCP
